import User from '../models/user.js';
import Submission from '../models/submission.js';
import Contest from '../models/contest.js';
import Batch from '../models/batch.js';

const adminController = {
    getDashboardStats: async (req, res) => {
      try {
        // Get count of students, faculty, batches, and contests
        const [studentCount, facultyCount, batchCount, contestCount, contests] = await Promise.all([
          User.countDocuments({ role: 'student' }),
          User.countDocuments({ role: 'faculty' }),
          Batch.countDocuments(), // Using Batch model to count batches directly
          Contest.countDocuments(),
          Contest.find().sort({ createdAt: -1 }).limit(10).populate('created_by', 'username')
        ]);
        
        // Get recent activity (submissions, new users, contest creations)
        const [recentSubmissions, recentUsers, recentBatches] = await Promise.all([
          Submission.find()
            .sort({ createdAt: -1 })
            .limit(3)
            .populate('user_id', 'username')
            .lean(),
            
          User.find()
            .sort({ createdAt: -1 })
            .limit(3)
            .select('username role createdAt')
            .lean(),
            
          Batch.find()
            .sort({ createdAt: -1 })
            .limit(2)
            .populate('faculty', 'username')
            .lean()
        ]);
        
        // Format recent activity
        const recentActivity = [
          ...recentSubmissions.map(sub => ({
            id: sub._id,
            userType: 'student',
            name: sub.user_id ? sub.user_id.username : 'Unknown Student',
            action: 'submitted solution',
            timestamp: sub.createdAt
          })),
          ...recentUsers.map(user => ({
            id: user._id,
            userType: user.role,
            name: user.username,
            action: 'registered',
            timestamp: user.createdAt
          })),
          ...recentBatches.map(batch => ({
            id: batch._id,
            userType: 'batch',
            name: batch.name,
            action: 'batch created',
            timestamp: batch.createdAt
          })),
          ...contests.map(contest => ({
            id: contest._id,
            userType: 'faculty',
            name: contest.created_by ? contest.created_by.username : 'Unknown Faculty',
            action: 'created contest',
            timestamp: contest.createdAt
          }))
        ]
        // Sort by timestamp (most recent first)
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        // Limit to 5 most recent activities
        .slice(0, 5);
        
        return res.status(200).json({
          success: true,
          studentCount,
          facultyCount,
          batchCount,
          contestCount,
          recentActivity
        });
      } catch (error) {
        console.error('Error fetching dashboard stats:', error);
        return res.status(500).json({ 
          success: false, 
          message: 'Error fetching dashboard statistics'
        });
      }
    },
};

export default adminController;
